<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cherp.app.empl.mapper.EmployeeMapper">


	<resultMap type="com.cherp.app.empl.vo.EmployeeVO" id="Employee">
		<id column="employee_code" property="employeeCode"/>
		<result column="employee_id" property="employeeId"/>
		<result column="name" property="name"/>
		<result column="hire_date" property="hireDate"/>
		<result column="password" property="password"/>
		<result column="employee_position" property="employeePosition"/>
		<result column="status_type" property="statusType"/>
		<result column="resignation_date" property="resignationDate"/>
		<result column="hire_type" property="hireType"/>
		<result column="department_code" property="departmentCode"/>
		<result column="department_name" property="departmentName"/>		
		<!-- 인사세부정보 -->
		<association property="employeeDetailVO" javaType="com.cherp.app.empl.vo.EmployeeDetailVO">
			<result column="eng_name" property="engName"/>
			<result column="identity_no" property="identityNo"/>
			<result column="head_check" property="headCheck"/>
			<result column="duty" property="duty"/>
			<result column="tel" property="tel"/>
			<result column="phone" property="phone"/>
			<result column="email" property="email"/>
			<result column="emp_status" property="empStatus"/>
			<result column="zipcode" property="zipcode"/>
			<result column="address" property="address"/>
			<result column="detail_address" property="detailAddress"/>
			<result column="bacct" property="bacct"/>
			<result column="depositor" property="depositor"/>
			<result column="employee_image" property="employeeImage"/>
			<result column="bank" property="bank"/>
			<result column="bank_name" property="bankName"/>
		</association>
		<!-- 기본급 -->
		<association property="employeeSalaryVO" javaType="com.cherp.app.empl.vo.EmployeeSalaryVO">
			<result column="monthly_salary" property="monthlySalary"/>
		</association>
		<!-- 고정수당 -->
		<collection property="fixedVO"
					javaType="java.util.ArrayList"
					ofType="com.cherp.app.empl.vo.FixedVO">
			<id column="fixed_no" property="fixedNo"/>
			<result column="allowance_price" property="allowancePrice"/>
			<result column="allowance_code" property="allowanceCode"/>
			<result column="allowance_name" property="allowanceName"/>
			<result column="allowance_check" property="allowanceCheck"/>
		</collection>
		<!-- 리절트맵시 사용시 association넣고나서 다시 result를 삽입하지 말것 오류뜸.  -->
	</resultMap>
	
	<!-- 인사정보 다건조회 -->
	<select id="selectAllEmployeeList" 
	        resultType="com.cherp.app.empl.vo.EmployeeVO" 
	        parameterType="com.cherp.app.common.dto.EmployeeSearchDto">
		SELECT 	em.employee_code,
				em.employee_id,
				em.name,
				em.hire_date,
				em.password,
				em.employee_position,
				em.status_type,
				em.resignation_date,
				em.hire_type,
				em.department_code,
                dp.department_name,
                ep.common_name AS employee_position_name
		FROM    employees em
		JOIN    department dp
        ON      em.department_code = dp.department_code
        JOIN    common_code ep 
        ON      ep.code_rule = em.employee_position
        <where>
        <if test="employeePosition != null and !employeePosition.equals('')">
        employee_position = #{employeePosition}
        </if>
        <if test="employeeName != null and !employeeName.equals('')">
        AND name LIKE '%'|| #{employeeName}|| '%'
        </if>
        <if test="employeeId != null and !employeeId.equals('')">
        AND employee_id LIKE '%'||#{employeeId}||'%'
        </if>
        <if test="departmentCode != null and !departmentCode.equals('')">
        AND em.department_code = #{departmentCode}
        </if>
        <if test="statusType != null and !statusType.equals('')">
        AND status_type = #{statusType}
        </if>

        <if test="hireDateStart != null" >
        AND hire_date >= #{hireDateStart}
        </if>
        <if test=" hireDateEnd != null " >        
        AND hire_date <![CDATA[ <= ]]> #{hireDateEnd}        
        </if>
        <if test="resignationDateStart != null " >
        <![CDATA[
        AND RESIGNATION_DATE >= #{resignationDateStart}
        ]]>
        </if>
        <if test="resingationDateEnd != null " >
        <![CDATA[
        AND RESIGNATION_DATE <= #{resingationDateEnd}
        ]]>
        </if>        
        </where>
	</select>
	
	<!-- 인사정보 단건조회 -->
	<select id="seleectEmployee" resultMap="Employee">
        SELECT 	em.employee_code,
		        em.employee_id,
		        em.name,
		        em.hire_date,
		        em.password,
		        em.employee_position,
		        em.status_type,
		        em.resignation_date,
		        em.hire_type,
		        em.department_code,
		        dp.department_name,
		        ed.eng_name,
		        ed.identity_no,
		        ed.head_check,
		        ed.duty,
		        ed.tel,
		        ed.phone,
		        ed.email,
		        ed.emp_status,
		        ed.zipcode,
		        ed.address,
		        ed.detail_address,
		        ed.bacct,
		        ed.depositor,
		        ed.employee_image,
		        ed.bank,
		        cc.common_name AS bank_name,
                es.monthly_salary,
                fx.fixed_no,
                fx.allowance_price,
                fx.allowance_code,
                ai.allowance_name,
                ai.allowance_check
                
		FROM    employees em
		JOIN    department dp	ON    em.department_code = dp.department_code
		JOIN    employees_detail ed		ON      em.employee_code = ed.employee_code
        JOIN    employees_salary es        ON      em.employee_code = es.employee_code
        LEFT JOIN    fixed fx        ON      em.employee_code = fx.employee_code
        LEFT JOIN    allowance_item ai        ON      fx.allowance_code = ai.allowance_code
        JOIN    common_code cc          ON ed.bank = cc.code_rule
		
		WHERE   em.employee_code = #{employeeCode}
		
	</select>
	<insert id="insertEmployee" statementType="CALLABLE" >
		CALL employee_insert(
								  #{name} 
								, #{hireDate}
								, #{password} 
								, #{employeePosition} 
								, #{statusType} 
								, #{resignationDate} 
								, #{hireType} 
								, #{departmentCode} 
								, #{employeeDetailVO.engName} 
								, #{employeeDetailVO.identityNo}
								, #{employeeDetailVO.headCheck}
								, #{employeeDetailVO.duty}
								, #{employeeDetailVO.tel}
								, #{employeeDetailVO.phone}
								, #{employeeDetailVO.email}
								, #{employeeDetailVO.empStatus}
								, #{employeeDetailVO.zipcode}
								, #{employeeDetailVO.address}
								, #{employeeDetailVO.detailAddress}
								, #{employeeDetailVO.bacct}
								, #{employeeDetailVO.depositor}
								, #{employeeDetailVO.employeeImage}
								, #{employeeDetailVO.bank}
								, #{employeeSalaryVO.monthlySalary}
								, #{fixedVO, mode=IN, typeHandler=com.cherp.app.empl.vo.EmployeeArrayStructHandler}
							)
	</insert>
	
	<!-- 인사정보 수정 -->
	<update id="updateEmployee" statementType="CALLABLE" >
		CALL employee_update (
		                      #{employeeCode}
							, #{name} 
							, #{hireDate}
							, #{password} 
							, #{employeePosition} 
							, #{statusType} 
							, #{resignationDate} 
							, #{hireType} 
							, #{departmentCode} 
							, #{employeeDetailVO.engName}
							, #{employeeDetailVO.identityNo}
							, #{employeeDetailVO.headCheck}
							, #{employeeDetailVO.duty}
							, #{employeeDetailVO.tel}
							, #{employeeDetailVO.phone}
							, #{employeeDetailVO.email}
							, #{employeeDetailVO.empStatus}
							, #{employeeDetailVO.zipcode}
							, #{employeeDetailVO.address}
							, #{employeeDetailVO.detailAddress}
							, #{employeeDetailVO.bacct} 
							, #{employeeDetailVO.depositor}
							, #{employeeDetailVO.employeeImage}
							, #{employeeDetailVO.bank}
							, #{employeeSalaryVO.monthlySalary}
							, #{fixedVO, mode=IN, typeHandler=com.cherp.app.empl.vo.EmployeeArrayStructHandler} 
                        		)
	
	</update>
	
	<!-- 인사정보 재직상태 변경(퇴직) -->
	<update id="updateStatusType" parameterType="java.util.List">
		UPDATE employees
		SET status_type = 'm3',
		    resignation_date = SYSDATE
		WHERE employee_code IN
        <foreach collection="list" item="employee" open="(" separator="," close=")">
			#{employee.employeeCode}
		</foreach>		
	</update>
	
	<!-- 인사기본정보 삭제 -->	
	<delete id="deleteEmployee" parameterType="java.util.ArrayList">
		DELETE FROM employees
		WHERE employee_code IN
        <foreach collection="array" item="employeeCode" open="(" separator="," close=")">
			#{employeeCode}
		</foreach>		
	</delete>
	
	<!-- 인사세부정보 삭제 -->	
	<delete id="deleteEmployeeDetail" parameterType="java.util.ArrayList">
		DELETE FROM employees_detail
		WHERE employee_code IN
        <foreach collection="array" item="employeeCode" open="(" separator="," close=")">
			#{employeeCode}
		</foreach>		
	</delete>
	
	<!-- 인사급여정보 삭제 -->	
	<delete id="deleteEmployeeSalary" parameterType="java.util.ArrayList">
		DELETE FROM employees_salary
		WHERE employee_code IN
        <foreach collection="array" item="employeeCode" open="(" separator="," close=")">
			#{employeeCode}
		</foreach>		
	</delete>

	<!-- 고정수당 삭제 -->	
	<delete id="deleteFixed" parameterType="java.util.ArrayList">
		DELETE FROM fixed
		WHERE employee_code IN
        <foreach collection="array" item="employeeCode" open="(" separator="," close=")">
			#{employeeCode}
		</foreach>		
	</delete>	
	
	<!-- 근태기록 삭제 -->
	<delete id="deleteAttHistory" parameterType="java.util.ArrayList">
		DELETE FROM att_history
		WHERE employee_code IN
        <foreach collection="array" item="employeeCode" open="(" separator="," close=")">
			#{employeeCode}
		</foreach>		
	</delete>

	<!-- 급여명세서 삭제 -->	
	<delete id="deleteSalaryPayroll" parameterType="java.util.ArrayList">
		DELETE FROM salary_payroll
		WHERE employee_code IN
        <foreach collection="array" item="employeeCode" open="(" separator="," close=")">
			#{employeeCode}
		</foreach>		
	</delete>
	
	<!-- 수당기록 삭제 -->	
	<delete id="deleteAllowanceHistory" parameterType="java.util.ArrayList">
		DELETE FROM allowance_history
		WHERE employee_code IN
        <foreach collection="array" item="employeeCode" open="(" separator="," close=")">
			#{employeeCode}
		</foreach>		
	</delete>
	
	<!-- 데이터삭제시 백업테이블에 데이터 넣기 -->
	<insert id="insertBackUpPayroll" parameterType="java.util.ArrayList">
		INSERT INTO backup_payroll (SALARY_NUMBER
		,PAYROLL_YDATE
		,MONTHLY_SALARY
		,OVERTIME_ALLOWANCE
		,NIGHT_ALLOWANCE
		,WEEKEND_ALLOWANCE
		,PAYMENT_TOTAL
		,INCOME_TAX
		,LOCAL_TAX
		,NATIONAL_INSURANCE
		,HEALTH_INSURANCE
		,EMPLOYMENT_INSURANCE
		,LEAVE_RATE
		,DEDUCTIONS_TOTAL
		,REAL_PAY
		,PAYROLL_SDATE
		,PAYROLL_EDATE
		,EMPLOYEE_CODE
		,NOTAX_PAYMENT
		,PAYROLL_CHECK
		,NAME
		,EMPLOYEE_ID)
		SELECT 
		sp.SALARY_NUMBER
		,sp.PAYROLL_YDATE
		,sp.MONTHLY_SALARY
		,sp.OVERTIME_ALLOWANCE
		,sp.NIGHT_ALLOWANCE
		,sp.WEEKEND_ALLOWANCE
		,sp.PAYMENT_TOTAL
		,sp.INCOME_TAX
		,sp.LOCAL_TAX
		,sp.NATIONAL_INSURANCE
		,sp.HEALTH_INSURANCE
		,sp.EMPLOYMENT_INSURANCE
		,sp.LEAVE_RATE
		,sp.DEDUCTIONS_TOTAL
		,sp.REAL_PAY
		,sp.PAYROLL_SDATE
		,sp.PAYROLL_EDATE
		,sp.EMPLOYEE_CODE
		,sp.NOTAX_PAYMENT
		,sp.PAYROLL_CHECK
		,em.name
		,em.employee_id
		FROM salary_payroll sp
		JOIN employees em
		ON sp.employee_code = em.employee_code
		WHERE sp.employee_code IN
        <foreach collection="array" item="employeeCode" open="(" separator="," close=")">
			#{employeeCode}
		</foreach>		
	</insert>

	
	<!-- 셀렉트박스 정보 불러오기 -->
	
	<!-- 공통코드 불러오기 -->
	<select id="selectCommonCodeList" parameterType="java.util.ArrayList">
	    SELECT code_rule,
               common_name,
               common_code
        FROM common_code
        WHERE common_code IN
        <foreach collection="array" item="commonCode" open="(" separator="," close=")">
			#{commonCode}
		</foreach>
	</select>
	
	
	
</mapper>