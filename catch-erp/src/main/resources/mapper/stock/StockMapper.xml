<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 재고조정 mapper -->
<mapper namespace="com.cherp.app.stck.mapper.StockMapper">
	
	<!-- 매입계약품목 전체조회 -->
	<select id="selectAllItemList" resultType="ContractItemVO">
		SELECT ci.*, cl.client_name
		FROM   contract_item ci 
		  JOIN contract c ON(ci.con_no = c.con_no)
		  JOIN client cl ON(c.client_code = cl.client_code)
	</select>
	
	<!--  구매내역 조회시 필요한 조회 조건에 맞는 구매전표번호 조회
	<select id="selectPurcSlipNoList" resultType="PurchaseChitVO">
		SELECT purcslip_no
		FROM   purchase_chit
		WHERE  
			<choose>
				<when test="type1 == 'code'">
				client_code = #{client} 
				</when>
				<otherwise>
				client_name LIKE CONCAT(#{client}, '%')
				</otherwise>
			</choose>
			<choose>
				<when test="type2 == 'code'">
					AND employee_code = #{employee}
				</when>
				<otherwise>
					AND employee_name LIKE CONCAT(#{employee}, '%')
				</otherwise>
			</choose>
	</select>
	
	조건검색된 구매전표번호로 구매내역을 조회
	<select id ="selectPurcHistoryList" parameterType ="map" resultType="PurchaseHistoryVO">
		WITH st as (SELECT wh_code,item_code, 
			SUM(CASE stocks_stocks_check WHEN 'd1' THEN stocks_stocks ELSE 0 END ) -  
			SUM(CASE stocks_stocks_check WHEN 'd2' THEN stocks_stocks ELSE 0 END ) AS current_quantity
		FROM stocks
		GROUP BY wh_code, item_code)
		SELECT hi.pur_no
			   ,hi.wh_code
			   ,hi.wh_name
			   ,hi.item_code
			   ,hi.item_name
			   ,hi.quantity
			   ,hi.restocking_price
			   ,hi.restocking_status
			   ,hi.restocking_date
			   ,hi.purcslip_no
			   ,hi.incomplete_quantity
			   ,ch.client_code
			   ,ch.client_name
			   ,ch.employee_code
			   ,ch.employee_name
			   ,ct.stocks_quantity
			   ,st.current_quantity
		FROM   purchase_history hi JOIN purchase_chit ch 
			ON (hi.purcslip_no = ch.purcslip_no) 
			JOIN contract_item ct ON (hi.item_code = ct.item_code)
			JOIN st ON (hi.item_code = st.item_code AND hi.wh_code = st.wh_code)
		WHERE hi.purcslip_no IN
	    <foreach item="purcNo" collection="chitNoArr" open="(" separator="," close=")">
	        #{purcNo}
	    </foreach>
	    <choose>
	    	<when test="type3 == 'code'">
	    		AND hi.item_code = #{item}
	    	</when>
	    	<otherwise>
	    		AND hi.item_name LIKE CONCAT(#{item}, '%')
	    	</otherwise>
	    </choose>
	    <if test="startDate != 'noDate'">
	    		AND hi.restocking_date >= TO_DATE(#{startDate})
	    </if>
	    <if test="endDate != 'noDate'">
	    	 <![CDATA[ 
	    		AND hi.restocking_date <= TO_DATE(#{endDate})
	     	 ]]>
	    </if>
	    AND hi.restocking_status != 'b3'
	    ORDER BY hi.restocking_date DESC
	</select> -->
	
	<!-- 구매내역조회 -->
	<select id="selectPurcHistoryList" parameterType="map" resultType="PurchaseHistoryVO">
		WITH st as (SELECT wh_code,item_code, 
			SUM(CASE stocks_stocks_check WHEN 'd1' THEN stocks_stocks ELSE 0 END ) -  
			SUM(CASE stocks_stocks_check WHEN 'd2' THEN stocks_stocks ELSE 0 END ) AS current_quantity
		FROM stocks
		GROUP BY wh_code, item_code)
		SELECT  hi.pur_no
			   ,hi.wh_code
			   ,hi.item_code
			   ,hi.item_name
			   ,hi.quantity
			   ,hi.restocking_price
			   ,hi.restocking_status
			   ,hi.restocking_date
			   ,hi.purcslip_no
			   ,hi.incomplete_quantity
			   ,ch.client_code
			   ,ch.client_name
			   ,ch.employee_code
			   ,ch.employee_name
			   ,ct.stocks_quantity
			   ,st.current_quantity
			   ,wh.wh_name
		FROM   purchase_history hi 
			JOIN purchase_chit ch ON (hi.purcslip_no = ch.purcslip_no)
			JOIN contract_item ct ON (hi.item_code = ct.item_code) 
			LEFT JOIN st ON (hi.item_code = st.item_code AND hi.wh_code = st.wh_code)
			JOIN warehouse wh ON (hi.wh_code = wh.wh_code)
		WHERE  hi.purcslip_no IN
			(SELECT  purcslip_no
			 FROM   purchase_chit
			 WHERE  1 != 2
			 <choose>
			 	<when test="clientCode != 'no'">
			 		AND client_code = #{clientCode}
			 	</when>  
			 	<otherwise>
			 		AND client_name LIKE CONCAT(#{clientName}, '%')
			 	</otherwise>
			 </choose>
			 <choose>
			 	<when test="employeeCode != 'no'">
			 		AND employee_code = #{employeeCode}
			 	</when>  
			 	<otherwise>
			 		AND employee_name LIKE CONCAT(#{employeeName}, '%')
			 	</otherwise>
			 </choose>) <!-- 서브쿼리 End Point -->
			<choose>
		    	<when test="itemCode != 'no'">
		    		AND hi.item_code = #{itemCode}
		    	</when>
		    	<otherwise>
		    		AND hi.item_name LIKE CONCAT(#{itemName}, '%')
		    	</otherwise>
		    </choose>
		    <if test="startDate != 'no'">
		    		AND hi.restocking_date >= TO_DATE(#{startDate})
		    </if>
		    <if test="endDate != 'no'">
		    	 <![CDATA[ 
		    		AND hi.restocking_date <= TO_DATE(#{endDate})
		     	 ]]>
		    </if>
		    AND restocking_status != 'b3'
		    ORDER BY hi.restocking_date DESC
	</select>
	
	
	<!-- 판매내역조회 -->
	<select id="selectSalesHistoryList" parameterType="map" resultType="SalesHistoryVO">
		WITH st as (SELECT wh_code,item_code, 
			SUM(CASE stocks_stocks_check WHEN 'd1' THEN stocks_stocks ELSE 0 END ) -  
			SUM(CASE stocks_stocks_check WHEN 'd2' THEN stocks_stocks ELSE 0 END ) AS current_quantity
		FROM stocks
		GROUP BY wh_code, item_code)
		SELECT hi.sales_no
			  ,hi.wh_code
			  ,hi.item_code
			  ,hi.item_name
			  ,hi.quantity
			  ,hi.delivery_price
			  ,hi.delivery_status
			  ,hi.delivery_date
			  ,hi.saleslip_no
			  ,hi.incomplete_quantity
			  ,ch.client_code
			  ,ch.client_name
			  ,ch.employee_code
			  ,ch.employee_name
			  ,ct.stocks_quantity
			  ,st.current_quantity
			  ,wh.wh_name
		FROM   saleslip_history hi 
			JOIN sales_chit ch ON (hi.saleslip_no = ch.saleslip_no)
			JOIN contract_item ct ON (hi.item_code = ct.item_code) 
			LEFT JOIN st ON (hi.item_code = st.item_code AND hi.wh_code = st.wh_code)
			JOIN warehouse wh ON (hi.wh_code = wh.wh_code)
		WHERE  hi.saleslip_no IN
			(SELECT  saleslip_no
			 FROM   sales_chit
			 WHERE  1 != 2
			 <choose>
			 	<when test="clientCode != 'no'">
			 		AND client_code = #{clientCode}
			 	</when>  
			 	<otherwise>
			 		AND client_name LIKE CONCAT(#{clientName}, '%')
			 	</otherwise>
			 </choose>
			 <choose>
			 	<when test="employeeCode != 'no'">
			 		AND employee_code = #{employeeCode}
			 	</when>  
			 	<otherwise>
			 		AND employee_name LIKE CONCAT(#{employeeName}, '%')
			 	</otherwise>
			 </choose>) <!-- 서브쿼리 End Point -->
			<choose>
		    	<when test="itemCode != 'no'">
		    		AND hi.item_code = #{itemCode}
		    	</when>
		    	<otherwise>
		    		AND hi.item_name LIKE CONCAT(#{itemName}, '%')
		    	</otherwise>
		    </choose>
		    <if test="startDate != 'no'">
		    		AND hi.delivery_date >= TO_DATE(#{startDate})
		    </if>
		    <if test="endDate != 'no'">
		    	 <![CDATA[ 
		    		AND hi.delivery_date <= TO_DATE(#{endDate})
		     	 ]]>
		    </if>
		    AND delivery_status != 'b3'
		    ORDER BY hi.delivery_date DESC
	</select>
	
	<!-- 재고조정 프로시저호출 -->
	<insert id="insertAdjustment" statementType="CALLABLE"> 
		CALL stocks_adjustment(
							#{StocksAdjustVO, mode=IN, typeHandler=com.cherp.app.stck.vo.StockAdjustArrayStructHandler}													
							)
	</insert>
	<!-- 최상단 재고조정번호 조회 --> 
	<select id="selectAdjustNo" resultType="StocksVO">
		SELECT NVL(MAX(real_no) + 1,TO_NUMBER(TO_CHAR(sysdate,'yyyyMMdd') || 000) ) AS real_no
		FROM   stocks
	</select>
	
	<!-- 제품 조건조회 -->
	<select id="selectAllSearchItemList" parameterType="ItemSearchVO" resultType="ContractItemVO">
		WITH result as (SELECT 
		    ci.item_code, 
		    ci.stocks_quantity - NVL(SUM(sh.incomplete_quantity), 0) AS result,
		    NVL(SUM(sh.incomplete_quantity), 0) AS out_quantity
		FROM 
		    contract_item ci
		    LEFT JOIN saleslip_history sh ON sh.item_code = ci.item_code 
		    							   <![CDATA[ 
		                                   AND sh.delivery_date < SYSDATE + 7
		                                   ]]>
		GROUP BY 
		    ci.item_code, 
		    ci.stocks_quantity)
		SELECT ci.con_no
			  ,ci.item_code
			  ,ci.item_name
			  ,ci.price
			  ,ci.stocks_quantity
			  ,ci.image
			  ,c.client_code
			  ,cl.client_name
			  ,r.result
			  ,r.out_quantity
		FROM  contract_item ci 
		    JOIN contract c ON (ci.con_no = c.con_no)
		   	JOIN client cl ON (c.client_code = cl.client_code)
		   	JOIN result r ON (ci.item_code = r.item_code)
		WHERE ci.con_no IN 
			(SELECT con_no
			 FROM contract
			 WHERE 1 != 2
		    <choose>
			 	<when test="clientHiddenInput != ''">
			 		AND client_code = #{clientHiddenInput}
			 	</when>  
			 	<otherwise>
			 		AND client_name LIKE CONCAT(#{clientInput}, '%')
			 	</otherwise>
			 </choose>) <!-- 서브쿼리 End Point -->
		 <choose>
		 	<when test="itemHiddenInput != ''">
		 		AND ci.item_code = #{itemHiddenInput}
		 	</when>  
		 	<otherwise>
		 		AND ci.item_name LIKE CONCAT(#{itemInput}, '%')
		 	</otherwise>
		 </choose>
		  <if test="minPrice != 0">
		    		AND price >= TO_NUMBER(#{minPrice})
		  </if>
		  <if test="maxPrice != 0">
		      <![CDATA[
		    		AND price <= TO_NUMBER(#{maxPrice})
		      ]]>
		  </if>
		  ORDER BY result ASC
		
	</select>
	
	<!-- 제품 상세정보 조회 -->
	<select id="selectItemDetail" parameterType="String" resultType="ContractItemVO">
		SELECT ci.con_no
		      ,ci.item_code
		      ,ci.item_name
		      ,ci.price
		      ,ci.image
		      ,ci.stocks_quantity
		      ,c.con_sdate
		      ,c.con_edate
		      ,c.client_code
		      ,cl.client_name	      
		FROM  contract_item ci
		    JOIN contract c ON (ci.con_no = c.con_no)
		    JOIN client cl ON (c.client_code = cl.client_code)
		WHERE item_code = #{itemCode}
	</select>
	
	<!-- 제품의 이미지 수정 (단건) -->
	<update id="updateItemImage">
		UPDATE contract_item 
		SET image = #{image}
		WHERE item_code = #{itemCode}
	</update>
	
	<!-- 제품의 창고별 재고 조회 -->
	<select id="selectItemQuantityByWh" parameterType="String" resultType="ContractItemVO">
		SELECT wh_code,item_code, 
			SUM(CASE stocks_stocks_check WHEN 'd1' THEN stocks_stocks ELSE 0 END ) -  
			SUM(CASE stocks_stocks_check WHEN 'd2' THEN stocks_stocks ELSE 0 END ) AS current_quantity
		FROM stocks
		WHERE item_code = #{itemCode} 
		    AND wh_code = #{whCode}
		GROUP BY wh_code, item_code
	</select>
	
	<!-- 재고조정이력 조회 -->
	<select id="selectAllAdjustList" parameterType="String" resultType="StocksVO">
		SELECT s.stocks_adjust_no
		      ,e.name AS employee_Name
		      ,s.reg_date
		      ,find_code(s.stocks_stocks_check) AS stocks_stocks_check
		      ,s.update_reason
              ,ph.purcslip_no  AS slip_no          
              ,s.stocks_stocks
		FROM  stocks s 
		   JOIN employees e ON (s.employee_code = e.employee_code)
		   JOIN purchase_history ph ON (s.log_no = ph.pur_no)
		WHERE s.item_code = #{itemCode}
		   <if test="whCode !='allStocks'">
		     AND s.wh_code = #{whCode}
		   </if> 
		   AND TO_CHAR(s.reg_date, 'yyyy') = #{date} 
		
		UNION ALL
		
		SELECT   s.stocks_adjust_no
		        ,e.name AS employee_Name
		        ,s.reg_date
		        ,find_code(s.stocks_stocks_check) AS stocks_stocks_check
		        ,s.update_reason		          
		        ,sh.saleslip_no AS slip_no
		        ,s.stocks_stocks
		FROM  stocks s 
		   JOIN employees e ON (s.employee_code = e.employee_code)	   
		   JOIN saleslip_history sh ON (s.log_no = sh.sales_no)
		WHERE s.item_code = #{itemCode}
		   <if test="whCode !='allStocks'"> 
		     AND s.wh_code = #{whCode}
		   </if>
		   AND TO_CHAR(s.reg_date, 'yyyy') = #{date}
		ORDER BY reg_date DESC, stocks_adjust_no DESC
	</select>
	
	<!-- 재고조정번호에 맞는 재고조정내역 조회 -->
	<!-- 일련번호 자재식별번호 품명 현재수량 증감수량 창고명 재고조정사유 -->
	<select id="selectAdjustLogList" resultType="StocksVO">
		SELECT s.stocks_adjust_no
		      ,s.log_no
		      ,s.item_code
		      ,s.stocks_quantity
		      ,s.stocks_stocks
		      ,s.update_reason
		      ,s.reg_date
		      ,ci.item_name
		      ,e.name AS employee_name
		      ,w.wh_name
		FROM  stocks s
		  JOIN contract_item ci ON (s.item_code = ci.item_code)
		  JOIN employees e ON (s.employee_code = e.employee_code)
		  JOIN warehouse w ON (s.wh_code = w.wh_code) 
		WHERE stocks_adjust_no = TO_NUMBER(#{stocksAdjustNo})
		ORDER BY real_no DESC
	</select>
	
	<!-- 제품이미지 삭제 -->
	<update id="deleteItemImage">
		UPDATE contract_item
		SET image = ''
		WHERE item_code = #{itemCode}
	</update>
</mapper>